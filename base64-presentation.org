#+Title: The Perils of Cross-Domain, Base64-Encoded, Clojure-Enabled Image Importing
#+DATE: %Y-%m-%d
#+AUTHOR: Tim Visher
#+Babel: :results silent

* Hello Monetate, I'm Tim                                             :slide:

  [[file:images/avatar.jpg]]

* Relay Network                                                       :slide:

  [[file:images/rly201.png]]

* I Have a Passion …                                                  :slide:

  [[file:images/wallpaperrr-icon.png]]

* … and a Problem                                                     :slide:

  [[file:images/the-problem.png]]

* Wallpaperrr                                                         :slide:

  #+BEGIN_QUOTE
  A community of curators passionate about their wallpaper.
  #+END_QUOTE

  [[file:images/wallpaperrr.png]]

*** What is Wallpaperrr?                                              :notes:
      - A service intended to make it dead simple to import images to a library. Think Instapaper or Evernote.
      - A manager for your wallpaper collection across all devices with differing screen resolutions and storage capacities.
      - A suite of apps that allow you to deftly control how and where your wallpaper will appear.
      - A community of people sharing their passion for ascetics together.

* Context                                                             :slide:

  - Import Strategy
  - [[http://www.thefoxisblack.com/category/the-desktop-wallpaper-project/][The Fox Is Black]]
  - A Failed Experiment Which Taught Me Something Anyway

** slide notes                                                        :notes:

   - Import Strategy
     - Always bothers me just a little that I'm hitting the server directly from mine.
     - The client already has the data (at least on Wallbase). Why not distribute the load?
     - Till now, 'ain't broke'

   - The Fox Is Black

     - Imports stopped working.

     - 403s on the back end while the front-end worked just fine.

     - Nothing obvious but there were a number of suspicious cookies and they had just done a redesign. I suspected lock out.

   - A Failed Experiment

     - Client-Side Image Downloading (Base64)

     - Don't Be Evil (especially to Wallbase)

     - Let's run an experiment!

* =POST= an Image to the server                                       :slide:

#+begin_src js
  {
    'title': 'foo',
    'source': 'http://localhost/foo/',
    'sourceUri': [
      'http://localhost/foo_1920x1080.png',
      'http://localhost/foo_1280x800.png'
    ]
  }
#+end_src

*** notes                                                             :notes:

    - Basic functionality is fine. Simply download each sourceUri on the back end
    - Downsides
      - Risk getting black-listed if you become popular
      - Can be bad for the receiving server to be hit twice for the same image (wallbase.cc)

* A better =POST= body?                                               :slide:

#+begin_src js
  {
    'title': 'foo',
    'source': 'http://localhost/foo/',
    'sourceUri': [
      'iVBORw0KGgoAAA…ggg==',
      'aBGoAAt0wwgggg…axx=='
    ]
  }
#+end_src

*** notes                                                             :notes:

    - Advantages

      - Get's me the image data directly from the client, which already has the data!

      - Offloads downloading the image to the client, which saves me from getting black-listed

    - Disadvantages

      - Client's with low-bandwidth get hammered.

      - Same Origin Policy!

* Obtaining the JSON                                                  :slide:

  file:images/front-end-process.png

** The Process                                                        :notes:

   - The Process
     - Insert a script from Wallpaperrr into source site
     - Scrape site for a title, source, and sourceUri(s)
     - =onload= of the iframe, post =gimme-data= message to =window.parent=
     - on =gimme-data= message, post =import-data= message back to =event.source=
       - Actually, there's a fork here. We can either gather up the sourceURIs directly and do nothing else, or we can grab canvas data.
     - on =import-data= message, =POST= =import-data= JSON back to server

** The bookmarklet

#+begin_src js
  var d=document,
      z=d.createElement('src'+'ipt'),
      b=d.body;

  if(!b) {
    throw (0);
  }
  z.setAttribute('src','http://localhost:3000/js/import.js');
  b.appendChild(z);

#+end_src

*** our bootstraperr

    - responsible for scraping the site
      - as it's loaded into the window's DOM directly, it has access to it
    - responsible for inserting the iframe it will be talking to

** The Scraper                                                        :slide:

   #+begin_src js
     wallpaperrrScraper.scrapeSite = function () {
       var siteScraper;

       siteScraper = wallpaperrrScraper.matchingScraper();

       return siteScraper ? siteScraper() : wallpaperrrScraper.defaultScraper();
     };
   #+end_src

*** Calling the scraper                                               :notes:

    - We provide a default scraper.
    - A saner language would let me get a key out of a map with a default.

** The Scraper                                                        :slide:

   #+begin_src js
     // man, I want underscore!
     wallpaperrrScraper.matchingScraper = function (sitePattern) {
       var siteMatch;
       for (siteMatch in wallpaperrrScraper.scraperDispatch) {
         if (wallpaperrrScraper.scraperDispatch
             .hasOwnProperty(siteMatch)) {
           if (document.baseURI.match(sitePattern)) {
             return wallpaperrrScraper.scraperDispatch[siteMatch];
           }
         }
       }
     };
   #+end_src

*** Selecting a scraper                                               :notes:

    - If I were using underscore, this'd be a lot easier. Que Sera, Sera.
    - Remember to use =hasOwnProperty= if you're iterating over an object's properties.
    - Passing a string to =match= works nicely and allows us to use regexps.

** The Scraper                                                        :slide:

#+begin_src js
  wallpaperrrScraper.scraperDispatch = {
    "thefoxisblack.com": wallpaperrrScraper.thefoxisblackScraper,
    "10.0.0.*":          wallpaperrrScraper.localhostScraper,
  };
#+end_src

*** The dispatch table                                                :notes:

   - Dispatch tables are nice! I picked them up from Relay.

   - Anyone can assoc into them, potentially opening up extensions without code redeployment.

   - This particular structure is nice because I can use regexps

** The Scraper                                                        :slide:

#+begin_src js
  wallpaperrrScraper.thefoxisblackScraper = function () {
    var aNodes, imageUrls, i;
    wallpaperrrScraper.title =
      document.querySelector('.post h2 a').textContent;
    aNodes = document.querySelectorAll('#wallpaper a');
    imageUrls = [];
    for (i = 0; i < aNodes.length; i += 1) {
      imageUrls.push(aNodes[i].href);
    }
    wallpaperrrScraper.sourceUri = imageUrls;
    wallpaperrrScraper.merge = true;
    wallpaperrrScraper.insertIFrame();
  };
#+end_src

*** The anatomy of a scraper                                          :notes:

    - I need 3 things: title, source, and the uris.

    - Title is used as the title of the wallpaper in your library as well as the name of the wallpaper file on downloading it.

    - Source is used to to link back to the source if others want to import that wallpaper.

    - Source URIs are used to download the actual wallpapers. Alternatively to the source URIs, I could have a series of base64 strings.

** Set Up Message Handlers                                            :slide:

#+begin_src js
  wallpaperrrScraper.messageHandlers = {
    'gimme-import-data': wallpaperrrScraper.postImportDataMessage
  };
#+end_src

** Insert the =iframe=                                                :slide:

#+begin_src js
  wallpaperrrScraper.insertIFrame = function () {
    var i, isrc;
    i =  document.createElement('iframe');
    i.setAttribute('id', 'addFrame');
    i.setAttribute('src', 'http://localhost:3000/bookmarklet-import');
    i.setAttribute('style', 'position: fixed; …');
    document.body.appendChild(i);
    i.focus();
  };
#+end_src

*** Insert an iframe responsible for delivering that data to Wallpaperrr and then allowing the user to rate and tag it. :notes:

    - We position it fixed at the top left so it looks nice and doesn't matter in what context it is inserted in.
    - Love that =z-index=

** =postMessage= to site                                              :slide:

#+begin_src js
    wallpaperrrBookmarkletImport.doImport = function () {
      window.addEventListener(
        'message',
        wallpaperrrBookmarkletImport.receiveMessage);
      window.parent.postMessage(
        {
          'target': 'wallpaperSite',
          'title': 'gimme-import-data'
        },
        '*');
    };
#+end_src

** =postMessage= to site                                              :slide:

#+begin_src js
  wallpaperrrScraper.handleMessage = function (e) {
    if ('wallpaperSite' !== e.data.target) {
      return false;
    }

    if (messageHandlers[e.data.title]) {
      return messageHandlers[e.data.title](e, e.data.payload);
    }
  }

  window.addEventListener('message', handleMessage);
#+end_src

** =postMessage= to Wallpaperrr                                       :slide:

#+begin_src js
  wallpaperrrScraper.postImportDataMessage = function (e) {
    var payload;
    payload = {
      'title': self.title,
      'sourceUri': self.sourceUri,
      'source': self.source,
      'merge': self.merge
    };
    e.source.postMessage(payload, '*');
  };
#+end_src

** A fork                                                             :slide:

   1. URIs
   2. Base64

** What we've got                                                     :slide:

#+begin_src js
  {
    'title': 'foo',
    'source': 'http://localhost/foo/',
    'sourceUri': [
      'http://localhost/foo_1920x1080.png',
      'http://localhost/foo_1280x800.png'
    ]
  }
#+end_src

*** notes                                                             :notes:

     - Basic functionality is fine. Simply download each sourceUri on the back end
     - Downsides
       - Risk getting black-listed if you become popular
       - Can be bad for the receiving server to be hit twice for the same image (wallbase.cc)

** =POST= Import Data (sans Base64)                                   :slide:

#+begin_src js
  wallpaperrrBookmarkletImport.imgsLoaded = function (importData) {
    wallpaperrrBookmarkletImport.importRequest()
      .send(JSON.stringify(importData));
    Wallpaperrr.Functions
      .showElement(
        document.getElementById('importing-header')
      );
  };
#+end_src

*** Nothing much to do here                                           :notes:
* Using the JSON                                                      :slide:

  - A Compojure =POST= Route
  - Some Ring =middleware=
  - Some Clojure =multimethods=
  - javax.imageio.ImageIO
  - org.jdesktop.swingx.graphics.GraphicsUtilities

** Basic Notes                                                        :notes:

   - We support Zip Files, Straight URIS, and now Base64 Strings
   - Middleware is cool (apparently comes from Rails?)
   - Java's big. Has 'good' image libraries. Can throw out of memory errors when handling large files. This is something I think I'm going to pay someone else to do.
   - Core =multimethods=
     - Requests are handled by =multimethods= dispatching on the =accept-header=
     - URIs are converted to =BufferedImage=, dispatching on the =class= of the input
     - Extensions are retrieved, dispatching on =class=

** The Back End Process                                               :slide:

   [[file:images/the-process.png]]

*** The Back End Process                                              :notes:

    - The Process
      1. =POST= route receives the request and destructures the JSON using middleware into function parameters.
      2. The =POST= route multimethod responsible for JSON accept headers takes over, passing the data through to the wallpaper model transaction script namespace
      3. We expand the source uris, turning Zip files into multiple temporary files
      4. We transform the expanded source uris into importable wallpapers
      5. We alter the user's library ref, adding in each wallpaper.
      6. We save off the state of the library to the store
      7. We finally download each of the source-uris that made it through the import process into their correlated library-store-ids
      8. Then we thumbnail-ize them
      9. And finally delete any temporary files that were created (at this point only in the case of ZipFiles)
      10. Return the response map.

    - We support Zip Files, Straight URIS, and now Base64 Strings
    - Core =multimethods=
      - Requests are handled by =multimethods= dispatching on the =accept-header=
      - URIs are converted to =BufferedImage=, dispatching on the =class= of the input
      - Extensions are retrieved, dispatching on =class=

** The Back End Process                                               :slide:

   #+begin_src clojure
     ;;; ["http://localhost:3000/user/tim.visher/…allbase_1920x1080.jpeg"] =>
     {:wallpaper {:thumbnail-resolution {:extension "jpeg",
                                         :hash "f47818e3692786db6737a1b20236ce60",
                                         :width 1920,
                                         :height 1080},
                  :imported-at 1366813210080,
                  :rating 0,
                  :source "http://localhost:3000/…",
                  :title "trees artwork - Wallpaper (#2756701) Wallbase",
                  :tags #{"16:9" "1920x1080"},
                  :resolutions #{{:extension "jpeg", :hash "…", :width 1920, :height 1080}}}
      :source-uri #<File /var/folders/y7/…}
   #+end_src

*** An importable wallpaper                                           :notes:

    1. Title should be appropriate for being the name of a file on any file system.
    2. Resolutions and Aspect Ratios should be added as tags automatically
    3. We should have hashes of all the files so storage is shared across all users
    4. Multiple source uris for the same logical 'wallpaper' should be merged together. Others should be kept separate.

** A Ring App                                                         :slide:

#+begin_src clojure
  (def app
    (-> #'routes/main-routes
        …
        wrap-params
        …
        wrap-json-params))
#+end_src

*** Anatomy of a Ring App                                             :notes:

    - A Ring app is a function which takes a request in the form of a map and returns a map representing a response.
    - This allows the use of higher order functions to construct 'middleware' which either transform the request or response on behalf of all inner routes.

** A Compojure Route                                                  :slide:

#+begin_src clojure
  (POST "/wallpaper" [merge title source sourceUri :as r]
        (let [{{{username :value} "username"} :cookies} r]
          (if username
            (letfn [(rep [s] (apply str (replace {\ , \+} s)))]
              (wallpaper-post-route r
                                    username
                                    title
                                    merge
                                    (rep source)
                                    (if (vector? sourceUri)
                                      (mapv rep sourceUri)
                                      sourceUri)))
            {:status 401})))
#+end_src


*** Anatomy of a Compojure route                                      :notes:

    - Compojure is a thin wrapper (started at around 200 SLOC) around constructing Ring handler functions.
    - It provides a series of Macros which make it easy to declare what kind of request you're handling, the URL you expect to hit, and how you want to destructure the parameters that can come in.

** The Transaction Script                                     :slide:bigcode:

   #+begin_src clojure
     (defn import-wallpaper
       ([username store-base merge? title source source-uris]
          (let [->importable-wallpaper (partial lib/import-uri->importable-wallpaper username title source)
                ->sanitized-title      (fn [wallpaper]
                                         (lib/sanitize-title username (:title wallpaper) (:thumbnail-resolution wallpaper)))
                source-uris            (expand-source-uris source-uris)
                importable-wallpapers  (doall
                                        (filter identity (map ->importable-wallpaper source-uris)))]
            (if (not (empty? importable-wallpapers))
              (let [source-uris              (map :source-uri importable-wallpapers)
                    wallpapers               (map :wallpaper importable-wallpapers)
                    sanitized-titles         (map ->sanitized-title wallpapers)
                    shortest-sanitized-title (first (sort-by count sanitized-title))
                    sanitized-title          shortest-sanitized-title
                    unique-titles            (lib/unique-titles username sanitized-title)
                    wallpapers               (map #(assoc %1 :title %2) wallpapers unique-titles)
                    wallpapers               (if merge? [(reduce merge-wallpapers wallpapers)] wallpapers)]
                (dorun (map (partial lib/add-library-wallpaper! username) wallpapers))
                (store/put :file-system store-base (str "libraries/" username ".clj") (pr-str (into #{}  (deref (lib/new-library username)))))
                (let [resolutions          (map (comp :thumbnail-resolution :wallpaper) importable-wallpapers)
                      library-object-ids   (map #(lib/wallpaper->library-object-id %1 "library" %2) (map :wallpaper importable-wallpapers) resolutions)
                      thumbnail-object-ids (map #(lib/wallpaper->thumbnail-object-id %1 "thumbnails" %2) (map :wallpaper importable-wallpapers) resolutions)]
                  (dorun
                   (map #(with-open [is (io/input-stream %2)] (store/put :file-system store-base %1 is)) library-object-ids source-uris))
                  (dorun
                   (map (partial store/create-thumbnail :file-system store-base) library-object-ids thumbnail-object-ids)))
                (dorun
                 (map fs/delete (filter fs/exists? (filter string? source-uris))))
                wallpapers)
              []))))
   #+end_src

**** The Transaction Script                                           :notes:

     - An Overview
        - Expand the source URIs
        - Transform source URIs to importable wallpaper
        - Add importable wallpapers to user lib
        - Download each to global file-store
        - Add thumbnails for each to global file-store
        - Delete temporary files
     - I'm creating functions in 4 different ways here. partial, comp, fn, and #(). Yeah, Clojure's functional alright.
       - many are anonymous, 2 are named in the let.
     - This is a common pattern for clojure code. Make a let that names each step of your algorithm so you can reference it later.
     - Notice dorun/doall. This is because Clojure is lazily evaluated and when you get back to the front-end you won't be able to iterate over the lazyseq.

*** Expanding the source URIs                                         :slide:

    #+begin_src clojure
      (defn expand-source-uris [source-uris]
        (loop [expanded-source-uris       #{}
               [source-uri & source-uris] (filter importable-uri? source-uris)]
          (if source-uri
            (cond (zipfile? source-uri)
                  (recur expanded-source-uris
                         (into source-uris (zipfile-uri->temp-files source-uri)))

                  (url-exists? source-uri)
                  (recur (conj expanded-source-uris (source-uri->temp-file source-uri))
                         source-uris)

                  :drop-it
                  (recur expanded-source-uris source-uris))
            expanded-source-uris)))
    #+end_src

**** Expanding the source URIs                                        :notes:

     - The loop/recur form is the only tail-call optimized form in Clojure. Useful if you can't get your job done using standard list-comprehensions or fold operations
     - Clojure supports destructuring binds. Sequences are destructured with vectors, and maps are destructured with maps.
     - In the case of a zipfile, we want to drop the original uri and replace it with many temporary files.

*** source-uris->importable-wallpaper                                 :slide:

#+begin_src clojure
  (defn import-uri->importable-wallpaper
    ([username title source source-uri]
       (if-let [wallpaper (import-uri->wallpaper username title source source-uri)]
         {:wallpaper wallpaper :source-uri source-uri}))
    ([username source-uri]
       (let [title (store/base-name (.getPath (java.net.URI. source-uri)))]
         (import-uri->importable-wallpaper username
                                           title
                                           source-uri
                                           source-uri))))
#+end_src

*** source-uris->importable-wallpaper                      :slide:mediumcode:

#+begin_src clojure
  (defn import-uri->wallpaper [username title source source-uri]
    (if-let [image (wc/uri->image source-uri)]
      (let [wallpaper {:resolutions #{(assoc (:resolution image) :extension (:extension image))}}
            wallpaper (assoc wallpaper :tags #{(wc/resolution->string (first (:resolutions wallpaper)))})
            wallpaper (assoc wallpaper :tags (->> (:resolutions wallpaper)
                                                  (first ,,,)
                                                  (wc/resolution->aspect-ratio ,,,)
                                                  (wc/aspect-ratio->string ,,,)
                                                  (conj (:tags wallpaper) ,,,)
                                                  (into #{} ,,,)))
            wallpaper (assoc wallpaper :title (sanitize-title username title (first (:resolutions wallpaper))))
            wallpaper (assoc wallpaper :source (try (.toString (java.net.URI. source))
                                                    (catch java.net.MalformedURLException e)))
            wallpaper (assoc wallpaper :rating 0)
            wallpaper (assoc wallpaper :imported-at (time-coerce/to-long (time/now)))
            wallpaper (assoc wallpaper :thumbnail-resolution (first (:resolutions wallpaper)))]
        wallpaper)))
#+end_src

*** source-uris->importable-wallpaper                                 :slide:

    - =wc/uri->image=

      #+begin_src clojure
        (defmulti java-image "Attempts to coerce it's argument to a BufferedImage" class)

        (defmethod java-image BufferedImage [^BufferedImage image]
          (GraphicsUtilities/toCompatibleImage image))

        (defmethod java-image :default [input-streamable]
          (input-streamable->java-image input-streamable))
      #+end_src

*** source-uris->importable-wallpaper                                 :slide:

    - =wc/uri->image=

      #+begin_src clojure
        (defmulti extensions "Attempts to get image format extensions for INPUT" class)

        (defmethod extensions :default [file]
          (with-open [is (io/input-stream file)]
            (->> (ImageIO/createImageInputStream is)
                 (ImageIO/getImageReaders)
                 (iterator-seq)
                 (map #(.getFormatName %))
                 (map #(.toLowerCase %))
                 (into #{}))))
      #+end_src

*** Add to the user's library                                         :slide:

#+begin_src clojure
  (dorun (map (partial lib/add-library-wallpaper! username) wallpapers))
  (store/put :file-system
             store-base
             (str "libraries/" username ".clj")
             (pr-str (into #{}  (deref (lib/new-library username)))))
#+end_src

*** Download Each source URI                                          :slide:


#+begin_src clojure
  (let [->thumbnail-resolution (comp :thumbnail-resolution :wallpaper)
        resolutions            (map ->thumbnail-resolution importable-wallpapers)
        wallpapers             (map :wallpaper importable-wallpapers)
        ->library-object-id    #(lib/wallpaper->library-object-id %1 "library" %2)
        library-object-ids     (map ->library-object-id wallpapers resolutions)
        ->thumbnail-object-id  #(lib/wallpaper->thumbnail-object-id %1 "thumbnails" %2)
        thumbnail-object-ids   (map ->thumbnail-object-id wallpapers resolutions)]
    (let [download-wallpaper #(with-open [is (io/input-stream %2)]
                                (store/put :file-system store-base %1 is))]
      (dorun
       (map download-wallpaper library-object-ids source-uris)))
    …)
#+end_src
*** Thumbnailization                                                  :slide:

    #+begin_src clojure
      (let [->thumbnail-resolution (comp :thumbnail-resolution :wallpaper)
            resolutions            (map ->thumbnail-resolution importable-wallpapers)
            wallpapers             (map :wallpaper importable-wallpapers)
            ->library-object-id    #(lib/wallpaper->library-object-id %1 "library" %2)
            library-object-ids     (map ->library-object-id wallpapers resolutions)
            ->thumbnail-object-id  #(lib/wallpaper->thumbnail-object-id %1 "thumbnails" %2)
            thumbnail-object-ids   (map ->thumbnail-object-id wallpapers resolutions)]
        …
        (let [create-thumbnail (partial store/create-thumbnail :file-system store-base)]
          (dorun
           (map create-thumbnail library-object-ids thumbnail-object-ids))))
    #+end_src

*** Thumbnailization                                                  :slide:

    #+begin_src clojure
      ;;; wallpaper-manager-core.store.store
      (defmulti create-thumbnail "Create a thumbnail in the store …" method)

      ;;; wallpaper-manager-core.store.file-system
      (defmethod create-thumbnail :file-system [_ base from-object-id to-object-id]
        (let [from (get :file-system base from-object-id)
              to   (get :file-system base to-object-id)]
          (fs/mkdirs (fs/parent to))
          (let [thumbnail-java-image (image/scale from)
                thumbnail-image      (image/java-image->image from thumbnail-java-image)]
            (image/write thumbnail-java-image (:extension thumbnail-image) (io/file to)))
          to-object-id))
    #+end_src
*** Delete the Temporary Files                                        :slide:

    #+begin_src clojure
      (dorun
       (map fs/delete (filter fs/exists? (filter string? source-uris))))
    #+end_src

** Send the Response                                                  :slide:

   #+begin_src clojure
     (defmethod wallpaper-post-route "application/json;q=0.0"
       [_ username title merge source sourceUri]
       {:pre [(or (vector? sourceUri) (string? sourceUri))]}
       (utf8-json-response
        (let [wallpapers …
              ->path     (fn [wallpaper]
                           (str "/user/"
                                username
                                "/wallpaper/"
                                (java.net.URLEncoder/encode (:title %) "UTF-8")))
              wallpapers (map #(dissoc % :imported-at) wallpapers)
              wallpapers (map #(assoc % :location (->path %)) wallpapers)]
          (json/generate-string wallpapers))))
   #+end_src

* But what about Base64?                                              :slide:

#+begin_src js
  {
    'title': 'foo',
    'source': 'http://localhost/foo/',
    'sourceUri': [
      'iVBORw0KGgoAAA…ggg==',
      'aBGoAAt0wwgggg…axx=='
    ]
  }
#+end_src

** notes                                                              :notes:

    - Disadvantages

      - Client's with low-bandwidth get hammered.

      - Same Origin Policy!

** The Punchline                                                      :slide:

   - Same Origin Data Good
   - Cross-Domain Data Bad

     [[file:images/good-bad.jpg]]

*** How to get Same Origin image data to the back end and imported.

    - Use HTML Canvas to get a datURL.
    - Send it to Wallpaperrr via postMessage and JSON
    - Implement an extension and java-image multimethod for (class (byte-array 1))
    - Everything else Just Works™

** Client-Side Concerns

*** Base64 encoding                                                   :slide:

    #+begin_src javascript
      wallpaperrrBookmarkletImport.importData = function (importData) {
        // self.imgsLoaded(importData);
        self.importDataToBase64(importData);
      };
    #+end_src

*** Base64 encoding                                                   :slide:

    #+begin_src javascript
      wallpaperrrBookmarkletImport.importDataToBase64 = function (importData) {
        var countdownLatch, i;
        countdownLatch = {};
        for (i = 0; i < importData.sourceUri.length; i += 1) {
          countdownLatch[importData.sourceUri[i]] = true;
          self.loadImageFile(
            importData.sourceUri[i],
            function (base64String) {
              imageUrls.push(base64String);
              delete countdownLatch[importData.sourceUri[i]];
              if (0 === Object.keys(countdownLatch).length) {
                importData.sourceUri = imageUrls;
                self.imgsLoaded(importData);
              }
            });
        }
      };
    #+end_src

*** Base64 encoding                                                   :slide:

    #+begin_src javascript
      wallpaperrrBookmarkletImport.loadImageFile = function (sURL, fCallback) {
        var img = new Image();
        img.src = sURL;
        img.onload = function () {
          self.canvas.width = this.width;
          self.canvas.height = this.height;
          self.ctx.clearRect(0, 0, this.width, this.height);
          self.ctx.drawImage(this, 0, 0);
          fCallback.call(this, self.dataUriToRawBase64(self.canvas.toDataURL()));
        };
      };
    #+end_src

**** notes                                                            :notes:

     - dataURIs are not base64 data

*** I don't fully understand what the Same Origin Policy effects. In my case, I could load an image but the image's origin-clean flag was set to false and thus I couldn't actually obtain the image data.

    http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#security-with-canvas-elements

** Server-Side Concerns

*** Decoding Base64 data                                              :slide:

    #+begin_src clojure
      (defn expand-source-uris [source-uris]
        (loop [expanded-source-uris       #{}
               [source-uri & source-uris] (filter importable-uri? source-uris)]
          (if source-uri
            (cond …

                  …

                  (str->base64-byte-array source-uri)
                  (recur (conj expanded-source-uris
                               (str->base64-byte-array source-uri))
                         source-uris)

                  …)
            expanded-source-uris)))
    #+end_src

*** Decoding Base64 data                                              :slide:

    #+begin_src clojure
            (defn str->base64-byte-array [str]
              (try (javax.xml.bind.DatatypeConverter/parseBase64Binary str)
                   (catch Exception e
                     (comment "NB: safe to ignore. Means base64 decoding failed."))))
    #+end_src

* Setting a URLConnection's User-Agent string                         :slide:

#+begin_src clojure
  (defn uri-input-stream-with-user-agent [url]
    (if-let [url (try (java.net.URL. url)
                      (catch java.net.MalformedURLException e
                        (comment "NB: OK to ignore. URL does not exist.")))]
      (let [con (doto (.openConnection url)
                  (.setRequestMethod "GET")
                  (.setRequestProperty "User-Agent" "Mozilla …")
                  (.connect))]
        (.getInputStream con))))
#+end_src

* Further experiments                                                 :slide:
  - Browser Extensions

* In Conclusion                                                       :slide:
  - Facepalm!
  - Base64 Is Easy to Get
  - Base64 Is Easy to Process
  - User-Agent Sniffing Bad!

* Thanks! Questions?                                                  :slide:

  - [[http://blog.wallpaperrr.cc][blog.wallpaperrr.cc]]
  - [[https://twitter.com/wallpaperrr][@wallpaperrr]]
  - [[https://developer.mozilla.org/en-US/docs/Code_snippets/Canvas][MDN Canvas Code Snippets]]
  - [[http://clojure.org/][Clojure.org]]
  - [[https://twitter.com/timvisher][@timvisher]]

*

#+TAGS: slide(s) notes(n)

#+OPTIONS: H:4

#+STYLE: <link rel="stylesheet" type="text/css" href="common.css" />
#+STYLE: <link rel="stylesheet" type="text/css" href="screen.css" media="screen" />
#+STYLE: <link rel="stylesheet" type="text/css" href="projection.css" media="projection" />
#+STYLE: <link rel="stylesheet" type="text/css" href="presenter.css" media="presenter" />

#+BEGIN_HTML
<script type="text/javascript" src="org-html-slideshow.js"></script>
#+END_HTML

# Local Variables:
# org-export-html-style-include-default: nil
# org-export-html-style-include-scripts: nil
# End:
